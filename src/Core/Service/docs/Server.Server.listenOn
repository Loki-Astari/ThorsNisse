```cpp
class MyState
{
    // Stuf
};
class MyHandler: public Serv::HandlerSuspendableWithStream
{
    public:
        // Notice the last parameter is `state`.
        // This means a state object must be provided to the `listenOn()` method.
        MyHandler(Serv::Server& parent, Sock::DataSocket&& stream, MyState& state)
            : HandlerSuspendableWithStream(parent, std::move(stream), EV_READ)
        {}

        virtual bool eventActivateWithStream(std::istream& input, std::ostream& output)
        { // Stuff }
};
int main()
{
    Serv::Server      server;
    MyStateObject     state;

    // Because we pass state to the `listenOn()` method; this will be passed to the constructor of 
    // `MyHandler` when it is created. This allows a user defined state object to be used consistently
    // across all connections.
    server.listenOn<MyHandler>(8080, state);

    // Start the event loop.
    server.start();
}
```

